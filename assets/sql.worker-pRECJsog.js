(function(){"use strict";const f={BASE_URL:"/portfolio/",DEV:!1,MODE:"production",PROD:!0,SSR:!1,VITE_ADMIN_PASSWORD:"c4m1ll3_p0rtf0l10_2024",VITE_ENCRYPTION_KEY:"your-secret-encryption-key-2024 "},u=r=>{const e=f[r];if(!e)throw new Error(`Environment variable ${r} is not defined`);return e},d={ADMIN_PASSWORD:u("VITE_ADMIN_PASSWORD"),ENCRYPTION_KEY:u("VITE_ENCRYPTION_KEY")};let c;const y="contact_form_db",l="messages";async function g(r){const e=JSON.stringify(r),t=new TextEncoder,s=t.encode(e),a=await crypto.subtle.importKey("raw",t.encode(d.ENCRYPTION_KEY),{name:"PBKDF2"},!1,["deriveBits","deriveKey"]),o=await crypto.subtle.deriveKey({name:"PBKDF2",salt:t.encode("salt"),iterations:1e5,hash:"SHA-256"},a,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),i=crypto.getRandomValues(new Uint8Array(12)),n=await crypto.subtle.encrypt({name:"AES-GCM",iv:i},o,s);return{iv:Array.from(i),data:Array.from(new Uint8Array(n))}}async function m(r){const e=new TextEncoder,t=await crypto.subtle.importKey("raw",e.encode(d.ENCRYPTION_KEY),{name:"PBKDF2"},!1,["deriveBits","deriveKey"]),s=await crypto.subtle.deriveKey({name:"PBKDF2",salt:e.encode("salt"),iterations:1e5,hash:"SHA-256"},t,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),a=await crypto.subtle.decrypt({name:"AES-GCM",iv:new Uint8Array(r.iv)},s,new Uint8Array(r.data)),o=new TextDecoder;return JSON.parse(o.decode(a))}async function p(){return new Promise((r,e)=>{const t=indexedDB.open(y,1);t.onerror=()=>{console.error("Database error:",t.error),e(t.error)},t.onsuccess=s=>{c=s.target.result,console.log("Database opened successfully"),r(c)},t.onupgradeneeded=s=>{const a=s.target.result;a.objectStoreNames.contains(l)||a.createObjectStore(l,{keyPath:"id",autoIncrement:!0}).createIndex("created_at","created_at",{unique:!1})}})}async function w(r){if(r!==d.ADMIN_PASSWORD)throw new Error("Unauthorized access");return c&&(c.close(),c=null),new Promise((e,t)=>{const s=indexedDB.deleteDatabase(y);s.onerror=()=>{t(new Error("Failed to delete database"))},s.onsuccess=async()=>{try{await p(),console.log("Database reset successfully"),e()}catch(a){t(a)}}})}async function D(r){const e={...r,created_at:new Date().toISOString()},t=await g(e);return new Promise((s,a)=>{const n=c.transaction([l],"readwrite").objectStore(l).add(t);n.onsuccess=()=>{console.log("Message saved successfully"),s(n.result)},n.onerror=()=>{console.error("Error saving message:",n.error),a(n.error)}})}async function E(r){if(r!==d.ADMIN_PASSWORD)throw new Error("Unauthorized access");return new Promise(async(e,t)=>{const o=c.transaction([l],"readonly").objectStore(l).getAll();o.onsuccess=async()=>{try{const i=await Promise.all(o.result.map(async n=>{const _=await m(n);return{id:n.id,..._}}));e(i)}catch(i){t(i)}},o.onerror=()=>{t(o.error)}})}p().then(()=>{console.log("Database initialized successfully!"),self.postMessage("ready")}).catch(r=>{console.error("Failed to initialize database:",r),self.postMessage({type:"error",error:r.message||"Failed to initialize the database"})}),self.onmessage=async r=>{try{const{action:e,data:t,password:s}=r.data;switch(e){case"submit-form":await D(t),self.postMessage({type:"submit-success",message:"Message saved successfully"});break;case"get-messages":try{const a=await E(s);self.postMessage({type:"messages",data:a})}catch{self.postMessage({type:"error",error:"Unauthorized access"})}break;case"reset-database":try{await w(s),self.postMessage({type:"reset-success",message:"Database reset successfully"})}catch(a){self.postMessage({type:"error",error:"Failed to reset database: "+a.message})}break;default:console.warn("Unknown action:",e)}}catch(e){console.error("Error in worker:",e),self.postMessage({type:"error",error:e.message||"An error occurred"})}}})();
