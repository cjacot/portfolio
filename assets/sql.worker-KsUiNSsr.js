import{E as l}from"./env-BGkC9yDX.js";let i;const y="contact_form_db",d="messages";async function g(s){const t=JSON.stringify(s),e=new TextEncoder,r=e.encode(t),a=await crypto.subtle.importKey("raw",e.encode(l.ENCRYPTION_KEY),{name:"PBKDF2"},!1,["deriveBits","deriveKey"]),o=await crypto.subtle.deriveKey({name:"PBKDF2",salt:e.encode("salt"),iterations:1e5,hash:"SHA-256"},a,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),c=crypto.getRandomValues(new Uint8Array(12)),n=await crypto.subtle.encrypt({name:"AES-GCM",iv:c},o,r);return{iv:Array.from(c),data:Array.from(new Uint8Array(n))}}async function m(s){const t=new TextEncoder,e=await crypto.subtle.importKey("raw",t.encode(l.ENCRYPTION_KEY),{name:"PBKDF2"},!1,["deriveBits","deriveKey"]),r=await crypto.subtle.deriveKey({name:"PBKDF2",salt:t.encode("salt"),iterations:1e5,hash:"SHA-256"},e,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),a=await crypto.subtle.decrypt({name:"AES-GCM",iv:new Uint8Array(s.iv)},r,new Uint8Array(s.data)),o=new TextDecoder;return JSON.parse(o.decode(a))}async function u(){return new Promise((s,t)=>{const e=indexedDB.open(y,1);e.onerror=()=>{console.error("Database error:",e.error),t(e.error)},e.onsuccess=r=>{i=r.target.result,console.log("Database opened successfully"),s(i)},e.onupgradeneeded=r=>{const a=r.target.result;a.objectStoreNames.contains(d)||a.createObjectStore(d,{keyPath:"id",autoIncrement:!0}).createIndex("created_at","created_at",{unique:!1})}})}async function w(s){if(s!==l.ADMIN_PASSWORD)throw new Error("Unauthorized access");return i&&(i.close(),i=null),new Promise((t,e)=>{const r=indexedDB.deleteDatabase(y);r.onerror=()=>{e(new Error("Failed to delete database"))},r.onsuccess=async()=>{try{await u(),console.log("Database reset successfully"),t()}catch(a){e(a)}}})}async function f(s){const t={...s,created_at:new Date().toISOString()},e=await g(t);return new Promise((r,a)=>{const n=i.transaction([d],"readwrite").objectStore(d).add(e);n.onsuccess=()=>{console.log("Message saved successfully"),r(n.result)},n.onerror=()=>{console.error("Error saving message:",n.error),a(n.error)}})}async function b(s){if(s!==l.ADMIN_PASSWORD)throw new Error("Unauthorized access");return new Promise(async(t,e)=>{const o=i.transaction([d],"readonly").objectStore(d).getAll();o.onsuccess=async()=>{try{const c=await Promise.all(o.result.map(async n=>{const p=await m(n);return{id:n.id,...p}}));t(c)}catch(c){e(c)}},o.onerror=()=>{e(o.error)}})}u().then(()=>{console.log("Database initialized successfully!"),self.postMessage("ready")}).catch(s=>{console.error("Failed to initialize database:",s),self.postMessage({type:"error",error:s.message||"Failed to initialize the database"})});self.onmessage=async s=>{try{const{action:t,data:e,password:r}=s.data;switch(t){case"submit-form":await f(e),self.postMessage({type:"submit-success",message:"Message saved successfully"});break;case"get-messages":try{const a=await b(r);self.postMessage({type:"messages",data:a})}catch{self.postMessage({type:"error",error:"Unauthorized access"})}break;case"reset-database":try{await w(r),self.postMessage({type:"reset-success",message:"Database reset successfully"})}catch(a){self.postMessage({type:"error",error:"Failed to reset database: "+a.message})}break;default:console.warn("Unknown action:",t)}}catch(t){console.error("Error in worker:",t),self.postMessage({type:"error",error:t.message||"An error occurred"})}};
